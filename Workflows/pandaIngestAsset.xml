<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/latest/studio.xsd"
          id="pandaIngestAsset"
          name="Ingest Asset"
          executionLabelExpression="Ingest Asset - ${#filename(fileToIngest)}"
          description=""
          showInUserInterface="true"
          subjectDOClassName=""
          subjectQualifierExpression=""
          sdkVersion="">

    <initialStepName>check if aae sidecar</initialStepName>

    <noopStep
            name="check if aae sidecar"
            executionLabelExpression="Extension = ${#extension(fileToIngest)}">
        <transition condition="${#extension(fileToIngest).toLowerCase() == 'aae' and deleteUponSuccess}">
            <targetStepName>delete original file</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>get exif data</targetStepName>
        </transition>
    </noopStep>

    <runCommandStep
            name="get exif data"
            executionLabelExpression="Extracting exif.. Result: ${exifMetaJson.toString().length() > 3500 ? exifMetaJson.toString().substring(exifMetaJson.toString().length() - 3500) : exifMetaJson.toString()}"
            executablePathExpression="${#sysconfig('exiftool.path')}"
            stdoutDataDef="exifMetaJson">
        <transition condition="${exifMetaJson != null and exifMetaJson.size() > 0 and exifMetaJson.CreateDate != null}">
            <targetStepName>set dates</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>copy to bad dates</targetStepName>
        </transition>
        <arg>${#absPath(fileToIngest)}</arg>
        <arg>-j</arg>
    </runCommandStep>

    <!--
        Date checking and repo structure:
        - The repo structure is ../yyyy/MM/dd
        - A valid create date is needed to ingest. To-Do: Add ability to bypass create date OR user-input create date
        - Check if CreateDate exists and is not 00:00:00
            - More checks to come (when looking at old files from old cameras where I need to find the create date differently)
            - If a valid Create Date isn't found, then move (copy/delete) the file into a badDates location for review
        - With valid create date, set the repo path and check to see if a file already exists with the same path/name
            - If no match, then proceed with ingest
            - If match, then check the complete create date (with HH/mm/ss) to determine if it is indeed a duplicate
                - If duplicate, move into the duplicates location
                - If not a duplicate, then call the copyFileStep that brings the file into the repository.
                ** A file will already exist there- the copyFileStep logic will rename the file automatically **
    -->
    <setContextData
            name="set dates"
            executionLabelExpression="Create Date = ${createDate}. Year = ${#formatDate('yyyy', createDate)}. Month = ${#formatDate('MMMM', createDate)}. Day = ${#formatDate('d', createDate)}. Day of week = ${#formatDate('EEEE', createDate)}.">
        <transition condition="${createDate != null and !localDateTime.contains('0000:00:00') and !localDateTime.contains('00:00:00')}">
            <targetStepName>update date path</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>copy to bad dates</targetStepName>
        </transition>
        <set targetDataDef="createDate" valueExpression="${#parseDate(exifMetaJson.CreateDate, 'yyyy:MM:dd')}"/>
        <set targetDataDef="completeDate" valueExpression="${#parseDate(exifMetaJson.CreateDate, 'yyyy:MM:dd HH:mm:ss')}"/>
        <set targetDataDef="localDateTime" valueExpression="${exifMetaJson.CreateDate}"/>
    </setContextData>

    <setContextData
            name="update date path"
            targetDataDef="datePath"
            valueExpression="${#formatDate('yyyy/MM/dd', createDate)}/"
            nextStep="update repo paths"/>

    <setContextData
            name="update repo paths"
            nextStep="check for existing source">
        <set targetDataDef="sourceRepoPath" valueExpression="${#sysconfig('filesystem.root.sources')}/${datePath}"/>
        <set targetDataDef="proxyRepoPath" valueExpression="${#sysconfig('filesystem.root.proxies')}/${datePath}"/>
    </setContextData>

    <noopStep
            name="check for existing source"
            executionLabelExpression="Source already in repo (${sourceRepoPath + fileName})? ${#fileExists(sourceRepoPath + fileName)}">
        <transition condition="${#fileExists(sourceRepoPath + fileName)}">
            <targetStepName>get exif data of existing</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>copy to source repo</targetStepName>
        </transition>
    </noopStep>

    <runCommandStep
            name="get exif data of existing"
            executionLabelExpression="Extracting exif from existing.. Result: ${exifMetaJson.toString().length() > 3500 ? exifMetaJson.toString().substring(exifMetaJson.toString().length() - 3500) : exifMetaJson.toString()}"
            executablePathExpression="${#sysconfig('exiftool.path')}"
            stdoutDataDef="exifMetaJsonExisting">
        <transition condition="${exifMetaJsonExisting != null and exifMetaJsonExisting.size() > 0 and exifMetaJsonExisting.CreateDate != null}">
            <targetStepName>set existing complete date</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>copy to duplicates</targetStepName>
        </transition>
        <arg>${sourceRepoPath + fileName}</arg>
        <arg>-j</arg>
    </runCommandStep>

    <setContextData
            name="set existing complete date"
            targetDataDef="existingCompleteDate"
            valueExpression="${#parseDate(exifMetaJsonExisting.CreateDate, 'yyyy:MM:dd HH:mm:ss')}"
            executionLabelExpression="Existing Complete Date = ${existingCompleteDate}. Same as new file? ${existingCompleteDate.equals(completeDate)}">
        <transition condition="${existingCompleteDate.equals(completeDate)}">
            <targetStepName>copy to duplicates</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>copy to source repo</targetStepName>
        </transition>
    </setContextData>

    <copyFileStep
            name="copy to bad dates"
            sourceFileExpression="${fileToIngest}"
            targetDirectoryExpression="${#sysconfig('filesystem.root.badDates')}">
        <transition condition="${deleteUponSuccess}">
            <targetStepName>delete original file</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
    </copyFileStep>

    <copyFileStep
            name="copy to duplicates"
            sourceFileExpression="${fileToIngest}"
            targetDirectoryExpression="${#sysconfig('filesystem.root.duplicates')}">
        <transition condition="${deleteUponSuccess}">
            <targetStepName>delete original file</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
    </copyFileStep>
    
    <copyFileStep 
            name="copy to source repo"
            executionLabelExpression="Copy file to repo: ${fileToIngest.absolutePath}"
            sourceFileExpression="${fileToIngest}" 
            targetDirectoryExpression="${sourceRepoPath}"
            resultDataDef="fileInRepo"
            nextStep="ingest file"/>

    <saveAssetStep
            name="ingest file"
            executionLabelExpression="Ingesting file ${fileInRepo.path}"
            contentExpression="${fileInRepo}"
            contentUseExpression="|SOURCE|MEZZANINE|"
            resultDataDef="assetVersion">
        <transition
                condition="${exifMetaJson.GPSCoordinates != null or (exifMetaJson.GPSLatitude != null and exifMetaJson.GPSLongitude != null and exifMetaJson.GPSAltitude != null)}">
            <targetStepName>set gps coordinates</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>save metadata</targetStepName>
        </transition>
    </saveAssetStep>

    <setContextData
            name="set gps coordinates"
            targetDataDef="gPSCoordinates"
            valueExpression="${exifMetaJson.GPSCoordinates != null ? exifMetaJson.GPSCoordinates : exifMetaJson.GPSLatitude + ', ' + exifMetaJson.GPSLongitude + ', ' + exifMetaJson.GPSAltitude}"
            nextStep="save metadata"/>

    <saveDataObjectStep
            name="save metadata"
            dataObjectExpression="${assetVersion.masterAsset.metadata}">
        <transition condition="${mediaType == 'VIDEO'}">
            <targetStepName>create video proxies</targetStepName>
        </transition>
        <transition condition="${mediaType == 'AUDIO'}">
            <targetStepName>create audio proxy</targetStepName>
        </transition>
        <transition condition="${mediaType == 'IMAGE'}">
            <targetStepName>create image proxy</targetStepName>
        </transition>
        <transition condition="${true}">
            <targetStepName>reindex</targetStepName>
        </transition>
        <property name="createDate">${createDate}</property>
        <property name="year">${#formatDate('yyyy', createDate)}</property>
        <property name="month">${#formatDate('MMMM', createDate)}</property>
        <property name="day">${#formatDate('d', createDate)}</property>
        <property name="dayOfWeek">${#formatDate('EEEE', createDate)}</property>
        <property name="fileName">${fileName}</property>
        <property name="localDateTime">${localDateTime}</property>
        <property name="gPSCoordinates">${gPSCoordinates}</property>
    </saveDataObjectStep>

    <executeSubflowStep
            name="create video proxies"
            executionLabelExpression="Creating video proxies"
            targetWorkflowId="createVideoProxy"
            subjectChangePath="${assetVersion.masterAsset}"
            nextStep="reindex">
        <subflowContextDataMapping parentDataDef="proxyRepoPath" subflowDataDef="customRepoProxies"/>
    </executeSubflowStep>

    <executeSubflowStep
            name="create audio proxy"
            targetWorkflowId="createAudioProxy"
            subjectChangePath="${assetVersion.masterAsset}"
            nextStep="reindex">
        <subflowContextDataMapping parentDataDef="proxyRepoPath" subflowDataDef="customRepoProxies"/>
    </executeSubflowStep>

    <executeSubflowStep
            name="create image proxy"
            targetWorkflowId="createImageProxy"
            subjectChangePath="${assetVersion.masterAsset}"
            nextStep="reindex">
        <subflowContextDataMapping parentDataDef="proxyRepoPath" subflowDataDef="customRepoProxies"/>
    </executeSubflowStep>

    <raiseWorkflowEventStep
            name="reindex"
            eventTypeExpression="ensureIndexed"
            executionLabelExpression="Ensure Asset Indexed">
        <transition condition="${assetVersion.masterAsset.metadata.gPSCoordinates != null}">
            <targetStepName>set location from gps coordinates</targetStepName>
        </transition>
        <transition condition="${deleteUponSuccess and fileInRepo != null}">
            <targetStepName>delete original file</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
        <property name="indexTargetRef">${assetVersion.masterAsset}</property>
    </raiseWorkflowEventStep>

    <executeSubflowStep
            name="set location from gps coordinates"
            targetWorkflowId="setLocationFromGPS"
            subjectChangePath="${assetVersion.masterAsset}">
        <transition condition="${deleteUponSuccess and fileInRepo != null}">
            <targetStepName>delete original file</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
    </executeSubflowStep>

    <deleteFileStep
            name="delete original file"
            sourceFilesExpression="${fileToIngest}"
            nextStep="end"/>


    <noopStep name="end"/>

    <!-- Input -->
    <contextDataDef name="fileToIngest" dataType="File" userInput="true" required="true"/>
    <contextDataDef name="deleteUponSuccess" dataType="Boolean" defaultDataExpression="${false}"/>

    <!-- Internal -->
    <contextDataDef name="mediaType" dataType="String" defaultDataExpression="${#mediaType(fileToIngest)}"/>
    <contextDataDef name="exifMetaJson" dataType="JSON"/>
    <contextDataDef name="exifMetaJsonExisting" dataType="JSON"/>

    <contextDataDef name="createDate" dataType="Date/Time"/>
    <contextDataDef name="completeDate" dataType="Date/Time"/>
    <contextDataDef name="existingCompleteDate" dataType="Date/Time"/>
    <contextDataDef name="localDateTime" dataType="String"/>
    <contextDataDef name="fileName" dataType="String" defaultDataExpression="${#filename(fileToIngest)}"/>
    <contextDataDef name="fileInRepo" dataType="File"/>

    <contextDataDef name="datePath" dataType="String" defaultDataExpression="${#formatDate('yyyy/MM/dd', #newDate())}/"/>
    <contextDataDef name="sourceRepoPath" dataType="String" defaultDataExpression="${#sysconfig('filesystem.root.sources')}/${datePath}"/>
    <contextDataDef name="proxyRepoPath" dataType="String" defaultDataExpression="${#sysconfig('filesystem.root.proxies')}/${datePath}"/>

    <contextDataDef name="existingSource" dataType="File"/>
    <contextDataDef name="assetVersion" dataType="Data Object"/>

    <contextDataDef name="gPSCoordinates" dataType="String"/>
</workflow>