<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/latest/studio.xsd"
          id="setLocationFromGPS"
          name="Set Location from GPS"
          executionLabelExpression="Set Location from GPS - ${subject.name}"
          description=""
          adminOnly="true"
          showInUserInterface="true"
          subjectDOClassName="AssetMaster"
          subjectQualifierExpression="${metadata.gPSCoordinates != null}"
          sdkVersion="">

    <initialStepName>set gps coords</initialStepName>

    <groovyStep
            name="set gps coords"
            resultDataDef="gpsCoordsString"
            nextStep="get location from google">
        <transition condition="${gpsCoordsString != null}">
            <targetStepName>get location from google</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
        <script>
            <![CDATA[
            // Example: 39 deg 52' 47.64" N, 105 deg 7' 21.00" W, 1697.325 m Above Sea Level

            parts = gpsData.split(',')

            if (parts.size() != 3) return null

            // Calculate latitute
            latParts = parts[0].trim().split(' ')
            latDegrees = Double.parseDouble(latParts[0])
            latMinutes = Double.parseDouble(latParts[2].replaceAll("'", ""))
            latSeconds = Double.parseDouble(latParts[3].replaceAll('"', ''))

            latDecimalDegrees = latDegrees + (latMinutes/60) + (latSeconds/3600)
            if (latParts[4] == 'S') latDecimalDegrees = latDecimalDegrees * (-1)

            // Calculate longitude
            longParts = parts[1].trim().split(' ')
            longDegrees = Double.parseDouble(longParts[0])
            longMinutes = Double.parseDouble(longParts[2].replaceAll("'", ""))
            longSeconds = Double.parseDouble(longParts[3].replaceAll('"', ''))

            longDecimalDegrees = longDegrees + (longMinutes/60) + (longSeconds/3600)
            if (longParts[4] == 'W') longDecimalDegrees = longDecimalDegrees * (-1)

            return latDecimalDegrees.toString() + ',' + longDecimalDegrees.toString()
            ]]>
        </script>
    </groovyStep>

    <submitHttpStep
            name="get location from google"
            executionLabelExpression="Get location from google.. URL = https://maps.googleapis.com/maps/api/geocode/json?latlng=${gpsCoordsString}&amp;key=${#sysconfig('google.api.key')}"
            requestMethodExpression="GET"
            urlExpression="https://maps.googleapis.com/maps/api/geocode/json?latlng=${gpsCoordsString}&amp;key=${#sysconfig('google.api.key')}"
            responseCodeDataDef="googleResponseCode"
            responsePayloadDataDef="googleResponseString">
        <transition condition="${googleResponseCode == 200}">
            <targetStepName>set google response json</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>google response failure</targetStepName>
        </transition>
    </submitHttpStep>

    <setContextData
            name="set google response json"
            targetDataDef="googleResponseJson"
            valueExpression="${googleResponseString}">
        <transition condition="${googleResponseJson != null and googleResponseJson.results.size() > 0 and googleResponseJson.status != 'ZERO_RESULTS'}">
            <targetStepName>parse google response for location</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
    </setContextData>

    <groovyStep
            name="parse google response for location"
            executionLabelExpression="Set location: '${locationJson.toString()}'"
            resultDataDef="locationJson"
            nextStep="save location metadata">
        <transition condition="${locationJson.location != null}">
            <targetStepName>save location metadata</targetStepName>
        </transition>
        <transition condition="${locationJson.address != null}">
            <targetStepName>save google maps link metadata result</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
        <script>
            <![CDATA[
            import groovy.json.JsonSlurper

            formattedAddress = googleResponseJson.results.get(0).formatted_address.asText()
            googleMapsID = googleResponseJson.results.get(0).place_id.asText()

            locationJson.put('address', formattedAddress)
            locationJson.put('googleMapsUrl', 'https://www.google.com/maps/search/?api=1&query=' + java.net.URLEncoder.encode(formattedAddress, "UTF-8") + '&query_place_id=' + googleMapsID)
            locationJson.put('appleMapsUrl', 'http://maps.apple.com/?address' + java.net.URLEncoder.encode(formattedAddress, "UTF-8"))

            def city
            def state
            def country

            googleResponseJson.results.get(0).address_components.each { component ->
                component.types.each { type ->
                    if (type.asText() == 'locality') city = component.long_name.asText()
                    if (type.asText() == 'administrative_area_level_1') state = component.long_name.asText()
                    if (type.asText() == 'country') country = component.long_name.asText()
                }
            }

            if (country) {
                // Only add state if country is US
                if (country == 'United States' && state) locationJson.put('state', state)

                countryPicklistItems = new JsonSlurper().parseText(queryReach('GET', '/reachengine/api/metadata-properties/' + countryMetaId + '/picklist-items?limit=1000', null))
                countryExists = (countryPicklistItems.find { item ->
                    if (item.displayName == country) return true
                })
                if (!countryExists) queryReach('PUT', '/reachengine/api/metadata-properties/' + countryMetaId + '/add-picklist-items', '[{"displayName":"' + country +'"}]')

                locationJson.put('country', country)
            }


            if (city) {
                cityPicklistItems = new JsonSlurper().parseText(queryReach('GET', '/reachengine/api/metadata-properties/' + cityMetaId + '/picklist-items?limit=1000', null))
                cityExists = (cityPicklistItems.find { item ->
                    if (item.displayName == city) return true
                })
                if (!cityExists) queryReach('PUT', '/reachengine/api/metadata-properties/' + cityMetaId + '/add-picklist-items', '[{"displayName":"' + city +'"}]')

                locationJson.put('city', city)
            }

            locationNamePicklistItems = new JsonSlurper().parseText(queryReach('GET', '/reachengine/api/metadata-properties/' + locationNameMetaId + '/picklist-items?limit=1000', null))
            locationTypePicklistItems = new JsonSlurper().parseText(queryReach('GET', '/reachengine/api/metadata-properties/' + locationTypeMetaId + '/picklist-items?limit=1000', null))

            // Get all Picklist metadata fields
            picklistMetaPropsJSON = new JsonSlurper().parseText(queryReach('GET', '/reachengine/api/metadata-properties?propertyType=lookup&fetchLimit=1000', null))

            // Check each metadata picklist in the system to determine if there's an exact match on the address
            picklistMetaPropsJSON.rows.each { row ->
                picklistItems = new JsonSlurper().parseText(queryReach('GET', '/reachengine/api/metadata-properties/' + row.id + '/picklist-items?limit=5000', null))
                if (picklistItems.find { item ->
                    if (item.displayName == formattedAddress) return true
                }) {
                    if (locationNamePicklistItems.find { locationNameItem ->
                        if (locationNameItem.displayName == row.displayName.replace(' Addresses', '')) return true
                    }) locationJson.put('locationName', row.displayName.replace(' Addresses', ''))
                    if (locationTypePicklistItems.find { locationTypeItem ->
                        if (locationTypeItem.displayName == row.displayName.replace(' Addresses', '')) return true
                    }) locationJson.put('locationType', row.displayName.replace(' Addresses', ''))
                }
            }

            return locationJson


            String queryReach (String method, String uri, String body) {
                connection = new URL(reachUrl + uri).openConnection()
                connection.setRequestProperty("Content-Type", "application/json")
                connection.setRequestProperty("apiKey", workflowApiKey)
                connection.setRequestProperty("api-version", "2.0")

                if ((method == 'POST' || method == 'PUT') && body != null) {
                    connection.setRequestMethod(method)
                    connection.setDoOutput(true)
                    connection.getOutputStream().write(body.getBytes("UTF-8"))
                }

                responseCode = connection.responseCode
                if (responseCode.equals(200)) {
                    return connection.inputStream.text
                } else {
                    println('---- Query Reach FAILURE ----')
                    println('Response Code = ' + responseCode)
                    println('Message = ' + connection.responseMessage)
                    println('Method = ' + method)
                    println('URI = ' + uri)
                    if (body != null) println('Body = ' + body)
                    return null
                }
            }
            ]]>
        </script>
    </groovyStep>

    <saveDataObjectStep
            name="save location metadata"
            jsonValuesDataDef="locationJson"
            dataObjectExpression="${asset.metadata}">
        <transition condition="${locationJson.address != null}">
            <targetStepName>save google maps link metadata result</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>reindex</targetStepName>
        </transition>
    </saveDataObjectStep>

    <setAssociationMetadataStep
            name="save google maps link metadata result"
            targetExpression="${asset}"
            propertyNameExpression="googleMaps"
            valueExpression="{&quot;title&quot;: &quot;${locationJson.address}&quot;, &quot;url&quot;: &quot;${locationJson.googleMapsUrl}&quot;}"
            nextStep="save apple maps link metadata result"/>

    <setAssociationMetadataStep
            name="save apple maps link metadata result"
            targetExpression="${asset}"
            propertyNameExpression="appleMaps"
            valueExpression="{&quot;title&quot;: &quot;${locationJson.address}&quot;, &quot;url&quot;: &quot;${locationJson.appleMapsUrl}&quot;}"
            nextStep="reindex"/>


    <raiseWorkflowEventStep
            name="reindex"
            eventTypeExpression="ensureIndexed"
            executionLabelExpression="Ensure Asset Indexed"
            nextStep="end">
        <property name="indexTargetRef">${asset}</property>
    </raiseWorkflowEventStep>

    <failWorkflowStep name="google response failure" reasonExpression="Query Google failed. Code: ${googleResponseCode}. URL: : https://maps.googleapis.com/maps/api/geocode/json?latlng=${gpsCoordsString}&amp;key=${#sysconfig('google.api.key')}"/>

    <noopStep name="end"/>

    <!-- Input -->
    <contextDataDef name="asset" dataType="Data Object" defaultDataExpression="${subject}"/>

    <!-- Internal -->
    <contextDataDef name="gpsData" dataType="String" defaultDataExpression="${asset.metadata.gPSCoordinates}"/>
    <contextDataDef name="gpsCoordsString" dataType="String"/>

    <contextDataDef name="googleResponseCode" dataType="Integer"/>
    <contextDataDef name="googleResponseString" dataType="String"/>
    <contextDataDef name="googleResponseJson" dataType="JSON"/>

    <contextDataDef name="locationJson" dataType="JSON" defaultDataExpression="{}"/>
    <contextDataDef name="cityMetaId" dataType="String" defaultDataExpression="${#sysconfig('metadata.city.id')}"/>
    <contextDataDef name="countryMetaId" dataType="String" defaultDataExpression="${#sysconfig('metadata.country.id')}"/>
    <contextDataDef name="locationTypeMetaId" dataType="String" defaultDataExpression="${#sysconfig('metadata.locationType.id')}"/>
    <contextDataDef name="locationNameMetaId" dataType="String" defaultDataExpression="${#sysconfig('metadata.locationName.id')}"/>

    <contextDataDef name="reachUrl" dataType="String" defaultDataExpression="${#sysconfig('reachengine.url')}"/>
    <contextDataDef name="workflowApiKey" dataType="String" defaultDataExpression="${#sysconfig('workflow.api.key')}"/>

    <contextDataDef name="appleMapsJson" dataType="String" defaultDataExpression="${asset.metadata.appleMaps}"/>
    <contextDataDef name="testAddress" dataType="String"/>
</workflow>