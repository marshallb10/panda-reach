<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://levelsbeyond.com/schema/workflow"
          xmlns:nimbus="http://levelsbeyond.com/schema/workflow/nimbus"
          xsi:schemaLocation="http://levelsbeyond.com/schema/workflow http://www.levelsbeyond.com/schema/latest/studio.xsd"
          id="setLocationFromGPS"
          name="Set Location from GPS"
          executionLabelExpression="Set Location from GPS - ${subject.name}"
          description=""
          adminOnly="true"
          showInUserInterface="true"
          subjectDOClassName="AssetMaster"
          subjectQualifierExpression="${metadata.gPSCoordinates != null}"
          sdkVersion="">

    <initialStepName>set gps coords</initialStepName>

    <groovyStep
            name="set gps coords"
            resultDataDef="gpsCoordsString"
            nextStep="get location from google">
        <transition condition="${gpsCoordsString != null}">
            <targetStepName>get location from google</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
        <script>
            <![CDATA[
            // Example: 39 deg 52' 47.64" N, 105 deg 7' 21.00" W, 1697.325 m Above Sea Level

            parts = gpsData.split(',')

            if (parts.size() != 3) return null

            // Calculate latitute
            latParts = parts[0].trim().split(' ')
            latDegrees = Double.parseDouble(latParts[0])
            latMinutes = Double.parseDouble(latParts[2].replaceAll("'", ""))
            latSeconds = Double.parseDouble(latParts[3].replaceAll('"', ''))

            latDecimalDegrees = latDegrees + (latMinutes/60) + (latSeconds/3600)
            if (latParts[4] == 'S') latDecimalDegrees = latDecimalDegrees * (-1)

            // Calculate longitude
            longParts = parts[1].trim().split(' ')
            longDegrees = Double.parseDouble(longParts[0])
            longMinutes = Double.parseDouble(longParts[2].replaceAll("'", ""))
            longSeconds = Double.parseDouble(longParts[3].replaceAll('"', ''))

            longDecimalDegrees = longDegrees + (longMinutes/60) + (longSeconds/3600)
            if (longParts[4] == 'W') longDecimalDegrees = longDecimalDegrees * (-1)

            return latDecimalDegrees.toString() + ',' + longDecimalDegrees.toString()
            ]]>
        </script>
    </groovyStep>

    <submitHttpStep
            name="get location from google"
            executionLabelExpression="Get location from google.. URL = https://maps.googleapis.com/maps/api/geocode/json?latlng=${gpsCoordsString}&amp;key=${#sysconfig('google.api.key')}"
            requestMethodExpression="GET"
            urlExpression="https://maps.googleapis.com/maps/api/geocode/json?latlng=${gpsCoordsString}&amp;key=${#sysconfig('google.api.key')}"
            responseCodeDataDef="googleResponseCode"
            responsePayloadDataDef="googleResponseString">
        <transition condition="${googleResponseCode == 200}">
            <targetStepName>set google response json</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>google response failure</targetStepName>
        </transition>
    </submitHttpStep>

    <setContextData
            name="set google response json"
            targetDataDef="googleResponseJson"
            valueExpression="${googleResponseString}">
        <transition condition="${googleResponseJson != null and googleResponseJson.results.size() > 0 and googleResponseJson.status != 'ZERO_RESULTS'}">
            <targetStepName>parse google response for location</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
    </setContextData>

    <groovyStep
            name="parse google response for location"
            executionLabelExpression="Set location: '${locationJson.toString()}'"
            resultDataDef="locationJson"
            nextStep="save location metadata">
        <transition condition="${locationJson.location != null}">
            <targetStepName>save location metadata</targetStepName>
        </transition>
        <transition condition="${locationJson.address != null}">
            <targetStepName>save google maps link metadata result</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>end</targetStepName>
        </transition>
        <script>
            <![CDATA[
            import groovy.json.JsonSlurper

            formattedAddress = googleResponseJson.results.get(0).formatted_address.asText()
            googleMapsID = googleResponseJson.results.get(0).place_id.asText()

            locationJson.put('address', formattedAddress)
            locationJson.put('googleMapsUrl', 'https://www.google.com/maps/search/?api=1&query=' + java.net.URLEncoder.encode(formattedAddress, "UTF-8") + '&query_place_id=' + googleMapsID)
            locationJson.put('appleMapsUrl', 'http://maps.apple.com/?address' + java.net.URLEncoder.encode(formattedAddress, "UTF-8"))

            if (formattedAddress.contains('Owens') ||
                    formattedAddress.equals('10901-10931 W 100th Way, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10101-10177 Countryside Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10200-10298 W 101st Pl, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10920 W 100th Way, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10931 W 100th Way, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10092 Oak Cir, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9907 W 99th Pl, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10541 W 101st Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9869 Kline St, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('Kipling Way, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('W 97th Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10900-10904 W 102nd Cir, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9950 W 100th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9837-9847 W 99th Pl, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9035 W 96th Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10011 Lewis Ct, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10040-10060 W 101st Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10045-10089 Countryside Dr, Westminster, CO 80021, USA')) {
                locationJson.put('location', 'Home')
                return locationJson
            }

            if (formattedAddress.equals('8430 Church Ranch Blvd, Broomfield, CO 80021, USA') ||
                    formattedAddress.equals('10001-10045 Dover St, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('8700 Church Ranch Blvd, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('8510 Church Ranch Blvd, Broomfield, CO 80021, USA') ||
                    formattedAddress.equals('8430 Church Ranch Blvd, Broomfield, CO 80021, USA') ||
                    formattedAddress.equals('8471-8563 Church Ranch Blvd, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('8900-8998 W 100th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('8300-8766 W 100th Ave, Westminster, CO 80021, USA')) {
                locationJson.put('location', 'Primrose')
                return locationJson
            }

            // Restaurants
            if (formattedAddress.equals('7475 W 88th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('14697 Delaware St, Westminster, CO 80023, USA') ||
                    formattedAddress.equals('7347 W 55th Ave, Arvada, CO 80002, USA') ||
                    formattedAddress.equals('8354 Quay Dr, Arvada, CO 80003, USA') ||
                    formattedAddress.equals('7254 W 84th Way, Arvada, CO 80003, USA') ||
                    formattedAddress.equals('7767 W 87th Dr, Arvada, CO 80005, USA') ||
                    formattedAddress.equals('7525-7563 W 88th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('7563 W 88th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10431 Town Center Dr, Broomfield, CO 80021, USA') ||
                    formattedAddress.equals('10414-10426 Town Center Dr, Westminster, CO 80021, USA, USA') ||
                    formattedAddress.equals('10415-10429 Town Center Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10404-10412 Town Center Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10414-10426 Town Center Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10300-10318 Reed St, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10434-10436 Town Center Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10435-10443 Town Center Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10436 Town Center Dr, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('1001 W 120th Ave, Westminster, CO 80234, USA') ||
                    formattedAddress.equals('8770 W 88th Ave, Arvada, CO 80003, USA') ||
                    formattedAddress.equals('9201-9299 W 99th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('8983 Wadsworth Pkwy, Westminster, CO 80005, USA') ||
                    formattedAddress.equals('7640-7658 W 90th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('7660-7678 W 90th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('7175 W 88th Ave, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('7275 W 88th Ave, Westminster, CO 80021, USA')) {
                locationJson.put('location', 'Restaurant')
                return locationJson
            }
            if (formattedAddress.equals('14694 Orchard Pkwy, Westminster, CO 80023, USA') ||
                    formattedAddress.equals('16494 Orchard Pkwy, Westminster, CO 80023, USA') ||
                    formattedAddress.equals('I-25, Westminster, CO 80023, USA')) {
                locationJson.put('location', 'Pigtails and Crewcuts')
                return locationJson
            }

            // Random Parks
            if (formattedAddress.equals('Big Dry Creek Trail, Englewood, CO 80110, USA') ||
                    formattedAddress.equals('10441 Newcombe St, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('10481 Newcombe St, Westminster, CO 80021, USA')) {
                locationJson.put('location', 'Park')
                return locationJson
            }

            // Random Doctor
            if (formattedAddress.equals('9017-9023 Wadsworth Pkwy, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('403 Summit Blvd, Broomfield, CO 80021, USA') ||
                    formattedAddress.equals('9035-9039 Wadsworth Pkwy, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9027 Wadsworth Pkwy, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9035 Wadsworth Pkwy, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9905 Hoyt Ln, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9404 W 99th Way, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('400 Indiana St, Lakewood, CO 80401, USA') ||
                    formattedAddress.equals('9041-9057 Wadsworth Pkwy, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9033-9035 Wadsworth Pkwy, Westminster, CO 80021, USA') ||
                    formattedAddress.equals('9029-9031 Wadsworth Pkwy, Westminster, CO 80021, USA')) {
                locationJson.put('location', 'Doctor')
                return locationJson
            }

            if (formattedAddress.contains('Denver')) {
                locationJson.put('location', 'Denver')
                return locationJson
            }
            if (formattedAddress.contains('Boulder')) {
                locationJson.put('location', 'Boulder')
                return locationJson
            }
            if (formattedAddress.contains('Louisville')) {
                locationJson.put('location', 'Louisville')
                return locationJson
            }
            if (formattedAddress.contains('Broomfield')) {
                locationJson.put('location', 'Broomfield')
                return locationJson
            }
            if (formattedAddress.contains('Erie')) {
                locationJson.put('location', 'Erie')
                return locationJson
            }
            if (formattedAddress.contains('Golden') || formattedAddress.equals('18300 Alameda Pkwy, Morrison, CO 80465, USA')) {
                locationJson.put('location', 'Golden')
                return locationJson
            }
            if (formattedAddress.contains('Durango')) {
                locationJson.put('location', 'Durango')
                return locationJson
            }
            if (formattedAddress.contains('Kona')) {
                locationJson.put('location', 'Kona')
                return locationJson
            }
            if (formattedAddress.contains('Redlands')) {
                locationJson.put('location', 'Redlands')
                return locationJson
            }
            if (formattedAddress.contains('Rancho Santa Margarita')) {
                locationJson.put('location', 'Rancho Santa Margarita')
                return locationJson
            }
            if (formattedAddress.contains('Yucca Valley')) {
                locationJson.put('location', 'Yucca Valley')
                return locationJson
            }
            if (formattedAddress.contains('Las Vegas')) {
                locationJson.put('location', 'Las Vegas')
                return locationJson
            }
            if (formattedAddress.contains('Phoenix') || (formattedAddress.contains('Surprise') && formattedAddress.contains('AZ'))) {
                locationJson.put('location', 'Phoenix')
                return locationJson
            }
            if (formattedAddress.contains('6400') && formattedAddress.contains('Westminster')) {
                locationJson.put('location', 'Costco')
                return locationJson
            }


            locationPicklistItems = new JsonSlurper().parseText(queryReach('GET', '/reachengine/api/metadata-properties/' + locationMetaId + '/picklist-items?limit=500', null))

            exists = false
            locationPicklistItems.each { item ->
                if (item.displayName == formattedAddress) {
                    exists = true
                }
            }
            if (!exists) {
                queryReach('PUT', '/reachengine/api/metadata-properties/' + locationMetaId + '/add-picklist-items', '[{"displayName":"' + formattedAddress +'"}]')
            }

            locationJson.put('location', formattedAddress)
            return locationJson

            String queryReach (String method, String uri, String body) {
                connection = new URL(reachUrl + uri).openConnection()
                connection.setRequestProperty("Content-Type", "application/json")
                connection.setRequestProperty("apiKey", workflowApiKey)
                connection.setRequestProperty("api-version", "2.0")

                if ((method == 'POST' || method == 'PUT') && body != null) {
                    connection.setRequestMethod(method)
                    connection.setDoOutput(true)
                    connection.getOutputStream().write(body.getBytes("UTF-8"))
                }

                responseCode = connection.responseCode
                if (responseCode.equals(200)) {
                    return connection.inputStream.text
                } else {
                    println('---- Query Reach FAILURE ----')
                    println('Response Code = ' + responseCode)
                    println('Message = ' + connection.responseMessage)
                    println('Method = ' + method)
                    println('URI = ' + uri)
                    if (body != null) println('Body = ' + body)
                    return null
                }
            }
            ]]>
        </script>
    </groovyStep>

    <saveDataObjectStep
            name="save location metadata"
            dataObjectExpression="${asset.metadata}">
        <transition condition="${locationJson.address != null}">
            <targetStepName>save google maps link metadata result</targetStepName>
        </transition>
        <transition condition="true">
            <targetStepName>reindex</targetStepName>
        </transition>
        <property name="location">${locationJson.location}</property>
    </saveDataObjectStep>


    <setAssociationMetadataStep
            name="save google maps link metadata result"
            targetExpression="${asset}"
            propertyNameExpression="googleMaps"
            valueExpression="{&quot;title&quot;: &quot;${locationJson.address}&quot;, &quot;url&quot;: &quot;${locationJson.googleMapsUrl}&quot;}"
            nextStep="save apple maps link metadata result"/>

    <setAssociationMetadataStep
            name="save apple maps link metadata result"
            targetExpression="${asset}"
            propertyNameExpression="appleMaps"
            valueExpression="{&quot;title&quot;: &quot;${locationJson.address}&quot;, &quot;url&quot;: &quot;${locationJson.appleMapsUrl}&quot;}"
            nextStep="reindex"/>


    <raiseWorkflowEventStep
            name="reindex"
            eventTypeExpression="ensureIndexed"
            executionLabelExpression="Ensure Asset Indexed"
            nextStep="end">
        <property name="indexTargetRef">${asset}</property>
    </raiseWorkflowEventStep>

    <failWorkflowStep name="google response failure" reasonExpression="Query Google failed. Code: ${googleResponseCode}. URL: : https://maps.googleapis.com/maps/api/geocode/json?latlng=${gpsCoordsString}&amp;key=${#sysconfig('google.api.key')}"/>

    <noopStep name="end"/>

    <!-- Input -->
    <contextDataDef name="asset" dataType="Data Object" defaultDataExpression="${subject}"/>

    <!-- Internal -->
    <contextDataDef name="gpsData" dataType="String" defaultDataExpression="${asset.metadata.gPSCoordinates}"/>
    <contextDataDef name="gpsCoordsString" dataType="String"/>

    <contextDataDef name="googleResponseCode" dataType="Integer"/>
    <contextDataDef name="googleResponseString" dataType="String"/>
    <contextDataDef name="googleResponseJson" dataType="JSON"/>

    <contextDataDef name="locationJson" dataType="JSON" defaultDataExpression="{}"/>
    <contextDataDef name="locationMetaId" dataType="String" defaultDataExpression="${#sysconfig('metadata.location.id')}"/>
    <contextDataDef name="reachUrl" dataType="String" defaultDataExpression="${#sysconfig('reachengine.url')}"/>
    <contextDataDef name="workflowApiKey" dataType="String" defaultDataExpression="${#sysconfig('workflow.api.key')}"/>

    <contextDataDef name="googleMapsMetaValue" dataType="String"/>
    <contextDataDef name="appleMapsMetaValue" dataType="String"/>
</workflow>